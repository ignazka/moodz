/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

// self.addEventListener('notificationclick', (event) => {
//   console.log('our user clicked on the notification!', window.location.href);
  
//   // Send user data analytics ðŸ”¥ ðŸ”¥ ðŸ”¥
// }, false);

// open the progressive web app if the user clicks on the notification
// self.addEventListener('notificationclick', (event) => {  
//   event.notification.close();
//   event.waitUntil(
//     clients.openWindow('https://progressive-web-app.com')
//   );
// }
// , false);


// self.addEventListener('notificationclick', (event) => {
//   console.log('our user clicked on the notification!', window.location.href);
//   event.notification.close();
//   event.waitUntil(
//     clients.openWindow('https://progressive-web-app.com')
//   );
// }
// , false);


// self.addEventListener('notificationclick', (event) => {


self.addEventListener('notificationclick', function (event)

{

  // open the progressive web app if the user clicks on the notificatio
  // if (event.action === 'open-app') {
  //   event.notification.close();
  //   event.waitUntil(clients.openWindow('/'));
  // } else {  // otherwise just close the notification  ðŸ”¥ ðŸ”¥ ðŸ”¥
  //   event.notification.close(); // ðŸ”¥ ðŸ”¥ ðŸ”¥ 
  // } // ðŸ”¥ ðŸ”¥ ðŸ”¥

  
  
    //For root applications: just change "'./'" to "'/'"
    //Very important having the last forward slash on "new URL('./', location)..."
    // const rootUrl = new URL('/', self.location.href).href; 
    // event.notification.close();

    // window.location.reload();
    //self.clients.openWindow('/');
    
    // event.waitUntil(
    //     self.clients.matchAll().then(matchedClients =>
    //     {
    //         for (let client of matchedClients)
    //         {
    //             if (client.url.indexOf(rootUrl) >= 0)
    //             {
    //               console.log("client.url",client.url);
    //                 // return client.focus();
    //             }
    //         }
    //         return self.clients.openWindow(rootUrl);

    //         // return self.clients.openWindow(rootUrl).then(function (client) { client.focus(); });
    //     })
    // );

 /*   const urlToOpen = new URL('/', self.location.origin).href;

const promiseChain = self.clients
  .matchAll({
    type: 'window',
    includeUncontrolled: true,
  })
  .then((windowClients) => {
    let matchingClient = null;

    for (let i = 0; i < windowClients.length; i++) {
      const windowClient = windowClients[i];
      if (windowClient.url === urlToOpen) {
        matchingClient = windowClient;
        break;
      }
    }

    if (matchingClient) {
      return matchingClient.focus();
    } else {
      return self.clients.openWindow(urlToOpen);
    }
  });

event.waitUntil(promiseChain);*/

event.waitUntil(self.clients.matchAll({
  type: "window",
  includeUncontrolled: true
}).then(function (clientList) {
  // if (data.WebUrl) {
      let client:any = null;

      for (let i = 0; i < clientList.length; i++) {
          let item = clientList[i];
          console.log("item",item);

          if (item.url) {
              client = item;
              break;
          }
      }

      if (client && 'navigate' in client) {
          client.focus();
          event.notification.close();
           return client.navigate('/');
      }
      else {
        //focus the progressive web app
        
          client.focus();
          event.notification.close();
          return client.navigate('/');
          
          // if client doesn't have navigate function, try to open a new browser window
          // return self.clients.openWindow(data.WebUrl);
      }
  // }
}));



});